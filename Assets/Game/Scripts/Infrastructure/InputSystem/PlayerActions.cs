//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Scripts/Infrastructure/InputSystem/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Scripts.Infrastructure.InputSystem
{
    public partial class @PlayerActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Placement"",
            ""id"": ""cc4062cb-57fb-4737-9637-57a7719fb3a1"",
            ""actions"": [
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Value"",
                    ""id"": ""e6eca3cc-4741-4401-8206-91dddf4909c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BuildingMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1a7e33a3-fd1d-4e8a-80fc-94377b5e24ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""94d0a953-4055-4bd5-8439-922110580b34"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e645f22-49ea-4105-88f1-37c2e92120c1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b52d4c8c-ca5f-4c8d-abbe-f03932f76d6a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f2abe67d-eb05-4a0b-8ed6-a76dc683025c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b5dca5c-f06b-4bb1-b0a6-b8917e0abada"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a1089c36-586a-4188-b54f-b4abd1cf4d93"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ef8ddcd-bd27-47ad-ade0-6c522447c708"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b4d63c75-7ba0-4abe-bb28-0ff5dfc6be2f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Placement
            m_Placement = asset.FindActionMap("Placement", throwIfNotFound: true);
            m_Placement_Pointer = m_Placement.FindAction("Pointer", throwIfNotFound: true);
            m_Placement_BuildingMove = m_Placement.FindAction("BuildingMove", throwIfNotFound: true);
            m_Placement_Confirm = m_Placement.FindAction("Confirm", throwIfNotFound: true);
        }

        ~@PlayerActions()
        {
            UnityEngine.Debug.Assert(!m_Placement.enabled, "This will cause a leak and performance issues, PlayerActions.Placement.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Placement
        private readonly InputActionMap m_Placement;
        private List<IPlacementActions> m_PlacementActionsCallbackInterfaces = new List<IPlacementActions>();
        private readonly InputAction m_Placement_Pointer;
        private readonly InputAction m_Placement_BuildingMove;
        private readonly InputAction m_Placement_Confirm;
        public struct PlacementActions
        {
            private @PlayerActions m_Wrapper;
            public PlacementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pointer => m_Wrapper.m_Placement_Pointer;
            public InputAction @BuildingMove => m_Wrapper.m_Placement_BuildingMove;
            public InputAction @Confirm => m_Wrapper.m_Placement_Confirm;
            public InputActionMap Get() { return m_Wrapper.m_Placement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlacementActions set) { return set.Get(); }
            public void AddCallbacks(IPlacementActions instance)
            {
                if (instance == null || m_Wrapper.m_PlacementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlacementActionsCallbackInterfaces.Add(instance);
                @Pointer.started += instance.OnPointer;
                @Pointer.performed += instance.OnPointer;
                @Pointer.canceled += instance.OnPointer;
                @BuildingMove.started += instance.OnBuildingMove;
                @BuildingMove.performed += instance.OnBuildingMove;
                @BuildingMove.canceled += instance.OnBuildingMove;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
            }

            private void UnregisterCallbacks(IPlacementActions instance)
            {
                @Pointer.started -= instance.OnPointer;
                @Pointer.performed -= instance.OnPointer;
                @Pointer.canceled -= instance.OnPointer;
                @BuildingMove.started -= instance.OnBuildingMove;
                @BuildingMove.performed -= instance.OnBuildingMove;
                @BuildingMove.canceled -= instance.OnBuildingMove;
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
            }

            public void RemoveCallbacks(IPlacementActions instance)
            {
                if (m_Wrapper.m_PlacementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlacementActions instance)
            {
                foreach (var item in m_Wrapper.m_PlacementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlacementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlacementActions @Placement => new PlacementActions(this);
        public interface IPlacementActions
        {
            void OnPointer(InputAction.CallbackContext context);
            void OnBuildingMove(InputAction.CallbackContext context);
            void OnConfirm(InputAction.CallbackContext context);
        }
    }
}
